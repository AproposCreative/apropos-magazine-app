import SwiftUI

// MARK: - Modern Navigation System
// A comprehensive navigation system with consistent top bars, search, notifications, and user menu

// MARK: - Navigation Configuration
struct NavigationConfig {
    let title: String
    let showBackButton: Bool
    let showSearchButton: Bool
    let showNotificationButton: Bool
    let showUserMenuButton: Bool
    let showFilterButton: Bool
    let backgroundColor: Color
    let titleColor: Color
    let buttonColor: Color
    
    init(
        title: String,
        showBackButton: Bool = false,
        showSearchButton: Bool = false,
        showNotificationButton: Bool = false,
        showUserMenuButton: Bool = false,
        showFilterButton: Bool = false,
        backgroundColor: Color = .clear,
        titleColor: Color = .primary,
        buttonColor: Color = .primary
    ) {
        self.title = title
        self.showBackButton = showBackButton
        self.showSearchButton = showSearchButton
        self.showNotificationButton = showNotificationButton
        self.showUserMenuButton = showUserMenuButton
        self.showFilterButton = showFilterButton
        self.backgroundColor = backgroundColor
        self.titleColor = titleColor
        self.buttonColor = buttonColor
    }
}

// MARK: - Modern Top Bar
struct ModernTopBar: View {
    let config: NavigationConfig
    let onBack: (() -> Void)?
    let onSearch: (() -> Void)?
    let onNotification: (() -> Void)?
    let onUserMenu: (() -> Void)?
    let onFilter: (() -> Void)?
    
    @Environment(\.colorScheme) private var colorScheme
    @State private var showUserMenu = false
    @State private var showNotifications = false
    
    var body: some View {
        ZStack(alignment: .top) {
            // Background with blur effect
            Rectangle()
                .fill(.ultraThinMaterial)
                .frame(height: 104) // 44 (safe area) + 60 (content)
                .ignoresSafeArea(edges: .top)
                .overlay(
                    Rectangle()
                        .fill(config.backgroundColor.opacity(0.1))
                        .blendMode(.overlay)
                )
            
            VStack(spacing: 0) {
                // Safe area spacer
                Rectangle()
                    .fill(Color.clear)
                    .frame(height: 44)
                
                // Main content
                HStack(spacing: 16) {
                    // Left side
                    HStack(spacing: 12) {
                        if config.showBackButton {
                            ModernButton(
                                icon: "chevron.left",
                                action: onBack ?? {}
                            )
                        }
                        
                        if config.showFilterButton {
                            ModernButton(
                                icon: "line.3.horizontal.decrease",
                                action: onFilter ?? {}
                            )
                        }
                    }
                    
                    Spacer()
                    
                    // Center - Title
                    Text(config.title)
                        .font(.system(size: 20, weight: .semibold, design: .rounded))
                        .foregroundColor(config.titleColor)
                        .lineLimit(1)
                        .minimumScaleFactor(0.8)
                    
                    Spacer()
                    
                    // Right side
                    HStack(spacing: 12) {
                        if config.showSearchButton {
                            ModernButton(
                                icon: "magnifyingglass",
                                action: onSearch ?? {}
                            )
                        }
                        
                        if config.showNotificationButton {
                            ModernButton(
                                icon: "bell",
                                action: {
                                    showNotifications.toggle()
                                    onNotification?()
                                }
                            )
                            .overlay(
                                // Notification badge
                                Circle()
                                    .fill(Color.red)
                                    .frame(width: 8, height: 8)
                                    .offset(x: 8, y: -8),
                                alignment: .topTrailing
                            )
                        }
                        
                        if config.showUserMenuButton {
                            ModernButton(
                                icon: "person.circle",
                                action: {
                                    showUserMenu.toggle()
                                    onUserMenu?()
                                }
                            )
                        }
                    }
                }
                .padding(.horizontal, 20)
                .frame(height: 60)
            }
        }
        .zIndex(1000)
        .ignoresSafeArea(edges: .top)
        .sheet(isPresented: $showUserMenu) {
            UserMenuSheet()
        }
        .sheet(isPresented: $showNotifications) {
            NotificationsSheet()
        }
    }
}

// MARK: - Modern Button Component
struct ModernButton: View {
    let icon: String
    let action: () -> Void
    @Environment(\.colorScheme) private var colorScheme
    
    var body: some View {
        Button(action: action) {
            Image(systemName: icon)
                .font(.system(size: 18, weight: .medium))
                .foregroundColor(.primary)
                .frame(width: 44, height: 44)
                .background(
                    Circle()
                        .fill(.ultraThinMaterial)
                        .overlay(
                            Circle()
                                .stroke(Color.primary.opacity(0.1), lineWidth: 0.5)
                        )
                )
        }
        .buttonStyle(ModernButtonStyle())
    }
}

// MARK: - Modern Button Style
struct ModernButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
            .opacity(configuration.isPressed ? 0.7 : 1.0)
            .animation(.easeInOut(duration: 0.1), value: configuration.isPressed)
    }
}

// MARK: - Scrollable Top Bar (for scrollable content)
struct ScrollableModernTopBar: View {
    let config: NavigationConfig
    let onBack: (() -> Void)?
    let onSearch: (() -> Void)?
    let onNotification: (() -> Void)?
    let onUserMenu: (() -> Void)?
    let onFilter: (() -> Void)?
    @Binding var showNavTitle: Bool
    
    @Environment(\.colorScheme) private var colorScheme
    @State private var showUserMenu = false
    @State private var showNotifications = false
    
    var body: some View {
        ZStack(alignment: .top) {
            // Background with blur effect
            Rectangle()
                .fill(.ultraThinMaterial)
                .opacity(showNavTitle ? 1.0 : 0.0)
                .frame(height: 104)
                .ignoresSafeArea(edges: .top)
                .overlay(
                    Rectangle()
                        .fill(config.backgroundColor.opacity(0.1))
                        .blendMode(.overlay)
                        .opacity(showNavTitle ? 1.0 : 0.0)
                )
                .animation(.easeInOut(duration: 0.3), value: showNavTitle)
            
            VStack(spacing: 0) {
                // Safe area spacer
                Rectangle()
                    .fill(Color.clear)
                    .frame(height: 44)
                
                // Main content
                HStack(spacing: 16) {
                    // Left side
                    HStack(spacing: 12) {
                        if config.showBackButton {
                            ModernButton(
                                icon: "chevron.left",
                                action: onBack ?? {}
                            )
                        }
                        
                        if config.showFilterButton {
                            ModernButton(
                                icon: "line.3.horizontal.decrease",
                                action: onFilter ?? {}
                            )
                        }
                    }
                    
                    Spacer()
                    
                    // Center - Title
                    Text(config.title)
                        .font(.system(size: 20, weight: .semibold, design: .rounded))
                        .foregroundColor(config.titleColor)
                        .opacity(showNavTitle ? 1.0 : 0.0)
                        .animation(.easeInOut(duration: 0.3), value: showNavTitle)
                        .lineLimit(1)
                        .minimumScaleFactor(0.8)
                    
                    Spacer()
                    
                    // Right side
                    HStack(spacing: 12) {
                        if config.showSearchButton {
                            ModernButton(
                                icon: "magnifyingglass",
                                action: onSearch ?? {}
                            )
                        }
                        
                        if config.showNotificationButton {
                            ModernButton(
                                icon: "bell",
                                action: {
                                    showNotifications.toggle()
                                    onNotification?()
                                }
                            )
                            .overlay(
                                // Notification badge
                                Circle()
                                    .fill(Color.red)
                                    .frame(width: 8, height: 8)
                                    .offset(x: 8, y: -8),
                                alignment: .topTrailing
                            )
                        }
                        
                        if config.showUserMenuButton {
                            ModernButton(
                                icon: "person.circle",
                                action: {
                                    showUserMenu.toggle()
                                    onUserMenu?()
                                }
                            )
                        }
                    }
                }
                .padding(.horizontal, 20)
                .frame(height: 60)
            }
        }
        .zIndex(1000)
        .ignoresSafeArea(edges: .top)
        .allowsHitTesting(false)
        .sheet(isPresented: $showUserMenu) {
            UserMenuSheet()
        }
        .sheet(isPresented: $showNotifications) {
            NotificationsSheet()
        }
    }
}

// MARK: - User Menu Sheet
struct UserMenuSheet: View {
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject var viewModel: ArticleViewModel
    
    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                // User profile section
                VStack(spacing: 16) {
                    Circle()
                        .fill(Color.blue.gradient)
                        .frame(width: 80, height: 80)
                        .overlay(
                            Image(systemName: "person.fill")
                                .font(.system(size: 32))
                                .foregroundColor(.white)
                        )
                    
                    VStack(spacing: 4) {
                        Text("Velkommen tilbage!")
                            .font(.title2.bold())
                        Text("Din personlige feed")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }
                .padding(.top, 20)
                
                // Menu options
                VStack(spacing: 12) {
                    MenuRow(icon: "person", title: "Profil", action: {})
                    MenuRow(icon: "heart.fill", title: "Favoritter", action: {})
                    MenuRow(icon: "clock", title: "Seneste læsning", action: {})
                    MenuRow(icon: "gear", title: "Indstillinger", action: {})
                    MenuRow(icon: "questionmark.circle", title: "Hjælp", action: {})
                    MenuRow(icon: "info.circle", title: "Om appen", action: {})
                }
                
                Spacer()
                
                // Sign out button
                Button(action: {
                    // Handle sign out
                    dismiss()
                }) {
                    HStack {
                        Image(systemName: "rectangle.portrait.and.arrow.right")
                        Text("Log ud")
                    }
                    .foregroundColor(.red)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.red.opacity(0.1))
                    .cornerRadius(12)
                }
            }
            .padding(.horizontal, 20)
            .navigationTitle("Menu")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Færdig") {
                        dismiss()
                    }
                }
            }
        }
    }
}

// MARK: - Notifications Sheet
struct NotificationsSheet: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                // Empty state
                VStack(spacing: 16) {
                    Image(systemName: "bell.slash")
                        .font(.system(size: 48))
                        .foregroundColor(.secondary)
                    
                    Text("Ingen notifikationer")
                        .font(.title2.bold())
                    
                    Text("Du får besked når der er nyt indhold")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                .padding(.top, 60)
                
                Spacer()
            }
            .padding(.horizontal, 20)
            .navigationTitle("Notifikationer")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Færdig") {
                        dismiss()
                    }
                }
            }
        }
    }
}

// MARK: - Menu Row Component
struct MenuRow: View {
    let icon: String
    let title: String
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 16) {
                Image(systemName: icon)
                    .font(.system(size: 18))
                    .foregroundColor(.blue)
                    .frame(width: 24)
                
                Text(title)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.primary)
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.system(size: 14))
                    .foregroundColor(.secondary)
            }
            .padding(.vertical, 12)
            .padding(.horizontal, 16)
            .background(Color(.systemGray6))
            .cornerRadius(12)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - View Extensions
extension View {
    func modernTopBar(
        config: NavigationConfig,
        onBack: (() -> Void)? = nil,
        onSearch: (() -> Void)? = nil,
        onNotification: (() -> Void)? = nil,
        onUserMenu: (() -> Void)? = nil,
        onFilter: (() -> Void)? = nil
    ) -> some View {
        ZStack(alignment: .top) {
            self
            
            ModernTopBar(
                config: config,
                onBack: onBack,
                onSearch: onSearch,
                onNotification: onNotification,
                onUserMenu: onUserMenu,
                onFilter: onFilter
            )
        }
    }
    
    func scrollableModernTopBar(
        config: NavigationConfig,
        showNavTitle: Binding<Bool>,
        onBack: (() -> Void)? = nil,
        onSearch: (() -> Void)? = nil,
        onNotification: (() -> Void)? = nil,
        onUserMenu: (() -> Void)? = nil,
        onFilter: (() -> Void)? = nil
    ) -> some View {
        ZStack(alignment: .top) {
            self
            
            ScrollableModernTopBar(
                config: config,
                onBack: onBack,
                onSearch: onSearch,
                onNotification: onNotification,
                onUserMenu: onUserMenu,
                onFilter: onFilter,
                showNavTitle: showNavTitle
            )
        }
    }
}

// MARK: - Predefined Configurations
extension NavigationConfig {
    static let home = NavigationConfig(
        title: "Apropos",
        showSearchButton: true,
        showNotificationButton: true,
        showUserMenuButton: true
    )
    
    static let articles = NavigationConfig(
        title: "Artikler",
        showSearchButton: true,
        showFilterButton: true,
        showUserMenuButton: true
    )
    
    static let categories = NavigationConfig(
        title: "Kategorier",
        showSearchButton: true,
        showUserMenuButton: true
    )
    
    static let favorites = NavigationConfig(
        title: "Gemt",
        showSearchButton: true,
        showUserMenuButton: true
    )
    
    static let profile = NavigationConfig(
        title: "Profil",
        showBackButton: true,
        showSearchButton: true,
        showUserMenuButton: true
    )
    
    static let articleDetail = NavigationConfig(
        title: "",
        showBackButton: true,
        showSearchButton: true,
        showNotificationButton: true,
        showUserMenuButton: true
    )
}

// MARK: - Preview
#Preview {
    VStack(spacing: 20) {
        // Static top bar
        ModernTopBar(
            config: .home,
            onSearch: { print("Search tapped") },
            onNotification: { print("Notification tapped") },
            onUserMenu: { print("User menu tapped") }
        )
        
        // Scrollable top bar
        ScrollableModernTopBar(
            config: .articles,
            onSearch: { print("Search tapped") },
            onUserMenu: { print("User menu tapped") },
            onFilter: { print("Filter tapped") },
            showNavTitle: .constant(true)
        )
        
        Spacer()
    }
    .background(Color(.systemGroupedBackground))
}
